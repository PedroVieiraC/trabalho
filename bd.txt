-- TABELAS DE ENTIDADE

DROP TABLE IF EXISTS 
    ALUGUEISATIVOS, 
    REGISTRODEALUGUEIS, 
    ALUGUEL, 
	PAGAMENTO,
    EQUIPAMENTO, 
    FORNECEDOR, 
    CLIENTE 
CASCADE;

-- TABELAS DE ENTIDADE

CREATE TABLE CLIENTE(
    CPF VARCHAR(11) PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CEP VARCHAR(8) NOT NULL,
    NUMERO INT NOT NULL,
    COMPLEMENTO VARCHAR(20),
    TELEFONE VARCHAR(11),
    SENHA VARCHAR(30)
);

CREATE TABLE FORNECEDOR(
    CNPJ VARCHAR(14) PRIMARY KEY,
    NOME_FANTASIA VARCHAR(50)
);

CREATE TABLE EQUIPAMENTO(
  ID SERIAL PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  CNPJ_FORNECEDOR VARCHAR(14) REFERENCES FORNECEDOR(CNPJ),
  QUANTIDADE INT,
  DESCRICAO VARCHAR(50) NOT NULL,
  VALOR_DIARIA NUMERIC(10, 2) NOT NULL,
  URL_IMAGEM VARCHAR(1000) -- Nova coluna para armazenar o URL da imagem
);

CREATE TABLE ALUGUEL(
    ID SERIAL PRIMARY KEY,
    CPF_CLIENTE VARCHAR(11) REFERENCES CLIENTE(CPF),
    QTDE_PARCELAS INT,
    DATA_INICIO DATE DEFAULT CURRENT_DATE,
    DATA_FIM DATE DEFAULT (CURRENT_DATE + INTERVAL '30 days')
);

CREATE TABLE PAGAMENTO(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID),
    PARCELA_NUMERO INT,
    VALOR_PARCELA NUMERIC(10,2),
    DATA_VENCIMENTO DATE,
    STATUS VARCHAR(10) CHECK(STATUS IN ('PAGO','VENCIDO','A PAGAR')),
    PRIMARY KEY (ID_ALUGUEL, PARCELA_NUMERO)
);

-- TABELAS DE RELACIONAMENTO

CREATE TABLE ALUGUEISATIVOS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID),
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

CREATE TABLE REGISTRODEALUGUEIS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID),
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

-- TRIGGERS

-- 1) SE O ADMINISTRADOR APAGOU UM ALUGUEL ATIVO, VAI PARA O REGISTRO
CREATE OR REPLACE FUNCTION registra_saida_aluguel() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO REGISTRODEALUGUEIS VALUES(OLD.ID_ALUGUEL, OLD.ID_EQUIPAMENTO, OLD.QUANTIDADE, OLD.VALOR);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER registra_saida_aluguel_trg
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION registra_saida_aluguel();

-- 2) SE O ADMINISTRADOR APAGOU UM ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION atualiza_estoque() RETURNS TRIGGER AS $$
BEGIN
    UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE + OLD.QUANTIDADE WHERE ID = OLD.ID_EQUIPAMENTO;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER atualiza_estoque_trg
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION atualiza_estoque();

-- 3) SE O CLIENTE CRIAR ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION dar_baixa_no_estoque() RETURNS TRIGGER AS $$
DECLARE
    QTDE_NO_ESTOQUE INT;
BEGIN
    SELECT QUANTIDADE INTO QTDE_NO_ESTOQUE FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    IF (QTDE_NO_ESTOQUE < NEW.QUANTIDADE) THEN
        RAISE EXCEPTION 'A quantidade solicitada excede a quantidade em estoque';
    ELSE
        UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE - NEW.QUANTIDADE WHERE ID = NEW.ID_EQUIPAMENTO;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER dar_baixa_no_estoque_trg
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION dar_baixa_no_estoque();

-- 4) VALOR TOTAL DO ALUGUEL VAI SER DADO POR TRIGGER
CREATE OR REPLACE FUNCTION set_valor_aluguel() RETURNS TRIGGER AS $$
DECLARE
    DATA_INICIAL DATE;
    DATA_FINAL DATE;
    DIARIA NUMERIC(10,2);
BEGIN
    SELECT DATA_INICIO INTO DATA_INICIAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    SELECT DATA_FIM INTO DATA_FINAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    
    SELECT VALOR_DIARIA INTO DIARIA FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    NEW.VALOR := NEW.QUANTIDADE * (DATA_FINAL - DATA_INICIAL) * DIARIA;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_valor_aluguel_trg
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION set_valor_aluguel();

-- 5) CRIAÇÃO DOS PAGAMENTOS A PARTIR DA QUANTIDADE DE PARCELAS
CREATE OR REPLACE FUNCTION create_pagamentos() RETURNS TRIGGER AS $$
DECLARE
    VALOR_TOTAL NUMERIC := 0;
    VALOR_PARCELA NUMERIC(10,2);
    ITERATOR INT := 0;
BEGIN
    -- Busca o valor total dos aluguéis ativos para o novo ID de aluguel
    SELECT COALESCE(SUM(VALOR), 0) INTO VALOR_TOTAL 
    FROM ALUGUEISATIVOS 
    WHERE ID_ALUGUEL = NEW.ID;
    
    -- Calcula o valor da parcela
    IF (NEW.QTDE_PARCELAS > 0) THEN
        VALOR_PARCELA := VALOR_TOTAL / NEW.QTDE_PARCELAS;
        
        -- Gera as parcelas
        WHILE (ITERATOR < NEW.QTDE_PARCELAS) LOOP
            INSERT INTO PAGAMENTO 
            VALUES(NEW.ID, ITERATOR + 1, VALOR_PARCELA, CURRENT_DATE + INTERVAL '30 days' * (ITERATOR + 1), 'A PAGAR');
            ITERATOR := ITERATOR + 1;
        END LOOP;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER create_pagamentos_trg
AFTER INSERT ON ALUGUEL
FOR EACH ROW
EXECUTE FUNCTION create_pagamentos();

-- POVOAMENTO DO BD

-- Clientes
INSERT INTO CLIENTE VALUES
('11111111111', 'Alexander Neves Barbosa Júnior', '39272104', 406, 'Casa', '31982679282', 'alequissander'),
('22222222222', 'Pedro Vieira Conceição', '30110100', 292, 'Casa', '31988888888', 'pedrito'),
('33333333333', 'Maurílio Rittershaussen Novaes', '30110200', 612, 'Casa', '31977777777', 'mistermaurilio'),
('44444444444', 'Davi Paulino Laboissiere Dantas', '30110300', 101, 'Bloco 10, Apto 102', '31966666666', 'superautopets'),
('55555555555', 'Eduardo Morais Silva Martins', '30110400', 983, 'Casa', '31955555555', 'dudu123'),
('66666666666', 'Iuri Veras Andrade Lima', '30110500', 482, 'Casa', '31944444444', 'iuri456');

-- Fornecedor
INSERT INTO FORNECEDOR VALUES
('12312312301000', 'Betoneiras Douradas LTDA.'),
('45645645601000', 'Murilo Bittencourt Inc.'),
('78978979801000', 'Construto e Equipamentos LTDA.'),
('11122233301000', 'Savassi Equipamentos'),
('44455566601000', 'FreeGlut LTDA.');

-- Equipamento
INSERT INTO EQUIPAMENTO (ID, NOME, CNPJ_FORNECEDOR, QUANTIDADE, DESCRICAO, VALOR_DIARIA, URL_IMAGEM) VALUES
(1001, 'Betoneira', '12312312301000', 300, '400 litros, 220v', 60.00, 'https://img.freepik.com/fotos-premium/maquinaria-industrial-do-misturador-de-cimento-no-canteiro-de-obras_56854-3133.jpg?w=900'),
(1002, 'Kit EPI', '45645645601000', 550,'Capacete, luvas, botina 40, oculos protetor', 8.00, 'https://img.freepik.com/fotos-gratis/luvas-de-seguranca-de-construcao-plana-e-mascara-medica_23-2148784095.jpg?t=st=1737938300~exp=1737941900~hmac=357eb96254e3720f4e3b49d82a104bf633ccacb9b20349cc74d38c3d208462cc&w=740'),
(1003, 'Martelos', '78978979801000', 120,'Martelo de unha, martelo chapeador e martelo pena', 7.00, 'https://img.freepik.com/fotos-gratis/martelos-de-construcao-ainda-vida_23-2150563178.jpg?t=st=1737938350~exp=1737941950~hmac=67887079eccdd68d2d79bc20480771b11d7ce854da85dbd562805790b66bc617&w=740'),
(1004, 'Aindaime 4 unidades','44455566601000',80, '1,00 x 1,50m', 20.00, 'https://img.freepik.com/fotos-gratis/bela-foto-de-barras-de-aco-de-metal-no-predio_181624-26081.jpg?t=st=1737938576~exp=1737942176~hmac=483c79d75ad5ffb3077bea3cf0adf4881a812762046314e309a3d1f551eb944b&w=900'),
(1005, 'Lixadeira', '11122233301000', 800, 'Esmerilhadeira 115mm 880w', 10.00, 'https://img.freepik.com/fotos-gratis/homem-trabalhando-com-um-moedor-angular-com-brilhos-dele_181624-29243.jpg?t=st=1737938682~exp=1737942282~hmac=8f06b0349796131fbc9975ad0190379dd9ae65aeaca5d2eb19b975beb6665c04&w=900');


-- Aluguel
INSERT INTO ALUGUEL (ID, CPF_CLIENTE, QTDE_PARCELAS, DATA_INICIO, DATA_FIM) VALUES
(1001, '11111111111', 4, '2024-07-20', '2025-07-20'),
(1002, '22222222222', 5, '2024-11-15', '2025-04-30'),
(1003, '33333333333', 10, '2022-05-13', '2025-07-22'),
(1004, '22222222222', 6, '2023-02-25', '2025-05-02'),
(1005, '11111111111', 1, '2024-09-10', '2025-03-05'),
(1006, '44444444444', 20, '2024-08-01', '2024-12-01'),
(1007, '55555555555', 12, '2023-10-10', '2024-03-10'),
(1008, '66666666666', 24, '2023-05-05', '2023-07-05'),
(1009, '11111111111', 12, '2020-10-10', '2021-03-10'),
(1010, '22222222222', 24, '2022-05-05', '2023-07-05');

-- Pagamento
INSERT INTO PAGAMENTO (ID_ALUGUEL, PARCELA_NUMERO, VALOR_PARCELA, DATA_VENCIMENTO, STATUS) VALUES
(1006, 1, 650.00, '2024-09-01', 'PAGO'),
(1006, 2, 650.00, '2024-10-01', 'PAGO'),
(1007, 1, 291.67, '2023-11-10', 'PAGO'),
(1007, 2, 291.67, '2023-12-10', 'PAGO'),
(1008, 1, 1687.50, '2023-06-05', 'PAGO'),
(1008, 2, 1687.50, '2023-07-05', 'PAGO')
ON CONFLICT (ID_ALUGUEL, PARCELA_NUMERO) DO NOTHING;

-- Alugueis Ativos
INSERT INTO ALUGUEISATIVOS VALUES
(1001, 1001, 100, NULL),
(1001, 1003, 50, NULL),
(1002, 1002, 300, NULL),
(1002, 1004, 30, NULL),
(1002, 1005, 200, NULL),
(1003, 1002, 10, NULL),
(1004, 1004, 30, NULL),
(1005, 1005, 200, NULL);

-- Registro de Alugueis
INSERT INTO REGISTRODEALUGUEIS VALUES
(1006, 1001, 2, 13000),
(1006, 1002, 5, 775),
(1007, 1003, 1, 3500),
(1007, 1005, 3, 2400),
(1008, 1004, 1, 40500),
(1008, 1002, 8, 1240),
(1008, 1005, 4, 3200),
(1006, 1003, 2, 7000),
(1007, 1001, 1, 6500),
(1008, 1003, 3, 10500),
(1009, 1001, 1, 6500),
(1010, 1003, 3, 10500);

-- Consultas

-- 1. Junção interna de no mínimo duas tabelas;
SELECT NOME, ID_ALUGUEL, ID_EQUIPAMENTO, VALOR, DATA_INICIO, DATA_FIM
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON AL.CPF_CLIENTE = C.CPF
ORDER BY CPF, ID_ALUGUEL;

-- 2. Junção externa de no mínimo duas tabelas;
SELECT NOME, ID_ALUGUEL
FROM CLIENTE C
LEFT OUTER JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON AL.CPF_CLIENTE = C.CPF
ORDER BY CPF, ID_ALUGUEL;

-- 3. Sentença de grupo envolvendo as junções dos itens anteriores;
SELECT CPF, NOME, SUM(VALOR)
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON C.CPF = AL.CPF_CLIENTE
GROUP BY CPF, NOME;

-- 4. Sentença com a cláusula HAVING a partir da consulta do item anterior;
SELECT CPF, NOME, SUM(VALOR)
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON C.CPF = AL.CPF_CLIENTE
GROUP BY CPF, NOME
HAVING SUM(VALOR) > (SELECT AVG(VALOR) FROM ALUGUEISATIVOS);

-- 5. Sentença envolvendo subconsulta a partir das consultas geradas nos itens anteriores;
SELECT NOME
FROM CLIENTE C
WHERE EXISTS (
    SELECT 1
    FROM (SELECT * FROM REGISTRODEALUGUEIS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
    WHERE AL.CPF_CLIENTE = C.CPF
);

Subconsulta:

A subconsulta (SELECT * FROM REGISTRODEALUGUEIS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) faz uma junção interna entre as tabelas REGISTRODEALUGUEIS e ALUGUEL usando o campo ID_ALUGUEL.

O resultado dessa subconsulta é uma lista de aluguéis encerrados com seus detalhes.

Filtro com EXISTS:

A cláusula EXISTS verifica se há pelo menos um registro na subconsulta onde o CPF_CLIENTE corresponde ao CPF do cliente na tabela CLIENTE.

Resultado:

A consulta principal retorna os nomes dos clientes que possuem aluguéis encerrados.

Saída Esperada:
NOME
Alexander Neves Barbosa Júnior
Pedro Vieira Conceição
Resumo
Consulta 1: Lista clientes com aluguéis ativos e detalhes dos aluguéis.

Consulta 2: Lista todos os clientes, incluindo aqueles sem aluguéis ativos.

Consulta 3: Calcula o valor total dos aluguéis ativos por cliente.

Consulta 4: Filtra clientes com valor total de aluguéis ativos acima da média.

Consulta 5: Lista clientes com aluguéis encerrados no histórico.

Essas consultas são úteis para análises e relatórios sobre os aluguéis dos clientes.

