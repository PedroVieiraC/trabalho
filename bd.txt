CREATE TABLE equipamentos (
  id INT PRIMARY KEY,
  nome VARCHAR(100) NOT NULL,
  cnpjfornecedor VARCHAR(14) NOT NULL,
  descricao TEXT NOT NULL,
  valordiaria DECIMAL(10, 2) NOT NULL,
  url_imagem VARCHAR(1000) -- Nova coluna para armazenar o URL da imagem
);

INSERT INTO equipamentos VALUES(1, 'Betoneira', '0823666000180', '400 litros, 220v', 60.00, 'https://img.freepik.com/fotos-premium/maquinaria-industrial-do-misturador-de-cimento-no-canteiro-de-obras_56854-3133.jpg?w=900');
INSERT INTO equipamentos VALUES(2, 'Kit EPI', '08236660000180', 'Capacete, luvas, botina 40, oculos protetor', 8.00, 'https://img.freepik.com/fotos-gratis/luvas-de-seguranca-de-construcao-plana-e-mascara-medica_23-2148784095.jpg?t=st=1737938300~exp=1737941900~hmac=357eb96254e3720f4e3b49d82a104bf633ccacb9b20349cc74d38c3d208462cc&w=740');
INSERT INTO equipamentos VALUES(3, 'Martelos', '08233665000180', 'Martelo de unha, martelo chapeador e martelo pena', 7.00, 'https://img.freepik.com/fotos-gratis/martelos-de-construcao-ainda-vida_23-2150563178.jpg?t=st=1737938350~exp=1737941950~hmac=67887079eccdd68d2d79bc20480771b11d7ce854da85dbd562805790b66bc617&w=740');
INSERT INTO equipamentos VALUES(4, 'Aindaime 4 unidades', '08236665000180', '1,00 x 1,50m', 20.00, 'https://img.freepik.com/fotos-gratis/bela-foto-de-barras-de-aco-de-metal-no-predio_181624-26081.jpg?t=st=1737938576~exp=1737942176~hmac=483c79d75ad5ffb3077bea3cf0adf4881a812762046314e309a3d1f551eb944b&w=900');
INSERT INTO equipamentos VALUES (5, 'Lixadeira', '0826665000180', 'Esmerilhadeira 115mm 880w', 10.00, 'https://img.freepik.com/fotos-gratis/homem-trabalhando-com-um-moedor-angular-com-brilhos-dele_181624-29243.jpg?t=st=1737938682~exp=1737942282~hmac=8f06b0349796131fbc9975ad0190379dd9ae65aeaca5d2eb19b975beb6665c04&w=900');

drop table equipamentos;

SELECT * FROM equipamentos;

DROP TABLE IF EXISTS alugueisativos;
DROP TABLE IF EXISTS clientescadastrados;
DROP TABLE IF EXISTS estoque;
DROP TABLE IF EXISTS fornecedores;
DROP TABLE IF EXISTS registrodealugueis;
DROP TABLE IF EXISTS seguros;
DROP TABLE IF EXISTS equipamentos;


SELECT * FROM alugueisativos;
SELECT * FROM clientescadastrados;
SELECT * FROM estoque;
SELECT * FROM fornecedores;
SELECT * FROM registrodealugueis;
SELECT * FROM seguros;

-- TABELAS DE ENTIDADE

CREATE TABLE CLIENTE(
    CPF VARCHAR(11) PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CEP VARCHAR(8) NOT NULL,
    NUMERO INT NOT NULL,
    COMPLEMENTO VARCHAR(20),
    TELEFONE VARCHAR(11),
    SENHA VARCHAR(30)
);

CREATE TABLE FORNECEDOR(
    CNPJ VARCHAR(14) PRIMARY KEY,
    NOME_FANTASIA VARCHAR(50)
);

CREATE TABLE EQUIPAMENTO(
  ID SERIAL PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  CNPJ_FORNECEDOR VARCHAR(14) REFERENCES FORNECEDOR(CNPJ),
  QUANTIDADE INT,
  DESCRICAO VARCHAR(50) NOT NULL,
  VALOR_DIARIA NUMERIC(10, 2) NOT NULL,
  URL_IMAGEM VARCHAR(1000) -- Nova coluna para armazenar o URL da imagem
);

CREATE TABLE ALUGUEL(
    ID SERIAL PRIMARY KEY,
    CPF_CLIENTE VARCHAR(11) REFERENCES CLIENTE(CPF),
    DATA_INICIO DATE DEFAULT CURRENT_DATE,
    DATA_FIM DATE DEFAULT (CURRENT_DATE + INTERVAL '30 days')
);

CREATE TABLE SEGURO(
    APOLICE SERIAL PRIMARY KEY,
    VALOR NUMERIC(10,2),
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID)
);

-- TABELAS DE RELACIONAMENTO

CREATE TABLE ALUGUEISATIVOS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID),
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

CREATE TABLE REGISTRODEALUGUEIS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID),
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

-- TRIGGERS

-- 1) SE O ADMINISTRADOR APAGOU UM ALUGUEL, SAI DA LISTA DE ALUGUEIS
CREATE OR REPLACE FUNCTION registra_saida_aluguel() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO REGISTRODEALUGUEIS VALUES(OLD.ID_ALUGUEL, OLD.ID_EQUIPAMENTO, OLD.QUANTIDADE, OLD.VALOR);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER REGISTRA_SAIDA_ALUGUEL_TRG
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION registra_saida_aluguel();

-- 2) SE O ADMINISTRADOR APAGOU UM ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION atualiza_estoque() RETURNS TRIGGER AS $$
BEGIN
    UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE + OLD.QUANTIDADE WHERE ID = OLD.ID_EQUIPAMENTO;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER ATUALIZA_ESTOQUE_TRG
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION atualiza_estoque();

-- 3) SE O CLIENTE CRIAR ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION dar_baixa_no_estoque() RETURNS TRIGGER AS $$
DECLARE
    QTDE_NO_ESTOQUE INT;
BEGIN
    SELECT QUANTIDADE INTO QTDE_NO_ESTOQUE FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    IF QTDE_NO_ESTOQUE < NEW.QUANTIDADE THEN
        DELETE FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
        RAISE EXCEPTION 'A quantidade solicitada excede a quantidade em estoque';
    ELSE
        UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE - NEW.QUANTIDADE WHERE ID = NEW.ID_EQUIPAMENTO;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER DAR_BAIXA_NO_ESTOQUE_TRG
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION dar_baixa_no_estoque();

-- 4) VALOR TOTAL DO ALUGUEL VAI SER DADO POR TRIGGER
CREATE OR REPLACE FUNCTION set_valor_aluguel() RETURNS TRIGGER AS $$
DECLARE
    DATA_INICIAL DATE;
    DATA_FINAL DATE;
    DIARIA NUMERIC(10,2);
BEGIN
    SELECT DATA_INICIO INTO DATA_INICIAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    SELECT DATA_FIM INTO DATA_FINAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    
    SELECT VALOR_DIARIA INTO DIARIA FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    NEW.VALOR := NEW.QUANTIDADE * (DATA_FINAL - DATA_INICIAL) * DIARIA;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER SET_VALOR_ALUGUEL_TRG
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION set_valor_aluguel();

-- 5) VALOR TOTAL DO SEGURO VAI SER DADO POR TRIGGER
CREATE OR REPLACE FUNCTION set_valor_seguro() RETURNS TRIGGER AS $$
DECLARE
    VALOR_TOTAL NUMERIC;
BEGIN
    SELECT SUM(VALOR) INTO VALOR_TOTAL FROM ALUGUEISATIVOS WHERE ID_ALUGUEL = NEW.ID_ALUGUEL;
    
    NEW.VALOR := VALOR_TOTAL / 10;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER SET_VALOR_SEGURO_TRG
BEFORE INSERT ON SEGURO
FOR EACH ROW
EXECUTE FUNCTION set_valor_seguro();

-- POVOAMENTO DO BD

-- Clientes
INSERT INTO CLIENTE VALUES
('11111111111', 'Alexander Neves Barbosa Júnior', '39272104', 406, 'Casa', '31982679282', 'alequissander'),
('22222222222', 'Pedro Vieira Conceição', '30110100', 292, 'Casa', '31988888888', 'pedrito'),
('33333333333', 'Maurílio Rittershaussen Novaes', '30110200', 612, 'Casa', '31977777777', 'mistermaurilio'),
('44444444444', 'Davi Paulino Laboissiere Dantas', '30110300', 101, 'Bloco 10, Apto 102', '31966666666', 'superautopets'),
('55555555555', 'Eduardo Morais Silva Martins', '30110400', 983, 'Casa', '31955555555', 'dudu123'),
('66666666666', 'Iuri Veras Andrade Lima', '30110500', 482, 'Casa', '31944444444', 'iuri456');

-- Fornecedor
INSERT INTO FORNECEDOR VALUES
('12312312301000', 'Betoneiras Douradas LTDA.'),
('45645645601000', 'Murilo Bittencourt Inc.'),
('78978979801000', 'Construto e Equipamentos LTDA.'),
('11122233301000', 'Savassi Equipamentos'),
('44455566601000', 'FreeGlut LTDA.');

-- Equipamento
INSERT INTO EQUIPAMENTO (ID, NOME, CNPJ_FORNECEDOR, QUANTIDADE, DESCRICAO, VALOR_DIARIA, URL_IMAGEM) VALUES
(1001, 'Betoneira', '12312312301000', 300, 'Betoneiras Incríveis', 650, NULL),
(1002, 'Kit EPI', '45645645601000', 550, 'Kit de Proteção Individual Completo', 15.50, NULL),
(1003, 'Britadeira', '78978979801000', 120, 'Britadeiras de alta performance', 350, NULL),
(1004, 'Trator', '44455566601000', 80, 'Tratores para uso geral', 4500, NULL),
(1005, 'Ferramentas Gerais', '11122233301000', 800, 'Ferramentas de uso geral', 80, NULL);

-- Aluguel
INSERT INTO ALUGUEL (ID, CPF_CLIENTE, DATA_INICIO, DATA_FIM) VALUES
(1001, '11111111111', '2024-07-20', '2025-07-20'),
(1002, '22222222222', '2024-11-15', '2025-04-30'),
(1003, '33333333333', '2022-05-13', '2025-07-22'),
(1004, '22222222222', '2023-02-25', '2025-05-02'),
(1005, '11111111111', '2024-09-10', '2025-03-05'),
(1006, '44444444444', '2024-08-01', '2024-12-01'),
(1007, '55555555555', '2023-10-10', '2024-03-10'),
(1008, '66666666666', '2023-05-05', '2023-07-05');

-- Alugueis Ativos
INSERT INTO ALUGUEISATIVOS VALUES
(1001, 1001, 100, NULL),
(1001, 1003, 50, NULL),
(1002, 1002, 300, NULL),
(1002, 1004, 30, NULL),
(1002, 1005, 200, NULL),
(1003, 1002, 10, NULL),
(1004, 1004, 30, NULL),
(1005, 1005, 200, NULL);

-- Seguro
INSERT INTO SEGURO (APOLICE, VALOR, ID_ALUGUEL) VALUES
(2001, NULL, 1001),
(2002, NULL, 1002),
(2003, NULL, 1003),
(2004, NULL, 1004),
(2005, NULL, 1005);

-- Registro de Alugueis
INSERT INTO REGISTRODEALUGUEIS VALUES
(1001, 1001, 2, 78000),
(1001, 1002, 5, 2325),
(1002, 1003, 1, 38500),
(1002, 1004, 1, 675000),
(1003, 1005, 3, 21600),
(1003, 1001, 1, 39000),
(1004, 1002, 10, 4650),
(1004, 1003, 2, 77000),
(1005, 1004, 2, 1350000),
(1005, 1005, 4, 43200),
(1006, 1001, 2, 13000),
(1006, 1002, 5, 775),
(1007, 1003, 1, 3500),
(1007, 1005, 3, 2400),
(1008, 1004, 1, 40500),
(1008, 1002, 8, 1240),
(1008, 1005, 4, 3200),
(1006, 1003, 2, 7000),
(1007, 1001, 1, 6500),
(1008, 1003, 3, 10500);

-- Consultas

-- 1. Junção interna de no mínimo duas tabelas;
SELECT NOME, ID_ALUGUEL, ID_EQUIPAMENTO, VALOR, DATA_INICIO, DATA_FIM
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON AL.CPF_CLIENTE = C.CPF
ORDER BY CPF, ID_ALUGUEL;

-- 2. Junção externa de no mínimo duas tabelas;
SELECT NOME, ID_ALUGUEL
FROM CLIENTE C
LEFT OUTER JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON AL.CPF_CLIENTE = C.CPF
ORDER BY CPF, ID_ALUGUEL;

-- 3. Sentença de grupo envolvendo as junções dos itens c ou d anteriores;
SELECT CPF, NOME, SUM(VALOR)
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON C.CPF = AL.CPF_CLIENTE
GROUP BY CPF, NOME;

-- 4. Sentença com a cláusula HAVING a partir da consulta do item e, anterior;
SELECT CPF, NOME, SUM(VALOR)
FROM CLIENTE C
JOIN (SELECT * FROM ALUGUEISATIVOS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
ON C.CPF = AL.CPF_CLIENTE
GROUP BY CPF, NOME
HAVING SUM(VALOR) > AVG(VALOR);

-- 5. Sentença envolvendo subconsulta a partir das consultas geradas nos itens de c a f, anteriores;
SELECT NOME
FROM CLIENTE C
WHERE EXISTS (
    SELECT 1
    FROM (SELECT * FROM REGISTRODEALUGUEIS ALUG JOIN ALUGUEL A ON ALUG.ID_ALUGUEL = A.ID) AL
    WHERE AL.CPF_CLIENTE = C.CPF
); 