-- TABELAS DE ENTIDADE

DROP TABLE IF EXISTS 
    ALUGUEISATIVOS, 
    REGISTRODEALUGUEIS, 
    ALUGUEL, 
    PAGAMENTO,
    EQUIPAMENTO, 
    FORNECEDOR, 
    CLIENTE 
CASCADE;

-- TABELAS DE ENTIDADE

CREATE TABLE CLIENTE(
    CPF VARCHAR(11) PRIMARY KEY,
    NOME VARCHAR(100) NOT NULL,
    CEP VARCHAR(8) NOT NULL,
    NUMERO INT NOT NULL,
    COMPLEMENTO VARCHAR(20),
    TELEFONE VARCHAR(11),
    SENHA VARCHAR(30)
);

CREATE TABLE FORNECEDOR(
    CNPJ VARCHAR(14) PRIMARY KEY,
    NOME_FANTASIA VARCHAR(50),
	TELEFONE varchar(11),
	EMAIL varchar(100)
);


SELECT * FROM FORNECEDOR WHERE cnpj = '4564564560100';
select * from fornecedor;
delete from fornecedor where cnpj = '08236665000100';

CREATE TABLE EQUIPAMENTO(
  ID SERIAL PRIMARY KEY,
  NOME VARCHAR(100) NOT NULL,
  CNPJ_FORNECEDOR VARCHAR(14) REFERENCES FORNECEDOR(CNPJ) ON UPDATE CASCADE,
  QUANTIDADE INT,
  DESCRICAO VARCHAR(50) NOT NULL,
  VALOR_DIARIA NUMERIC(10, 2) NOT NULL,
  URL_IMAGEM VARCHAR(1000) -- Nova coluna para armazenar o URL da imagem
);

CREATE TABLE ALUGUEL(
    ID SERIAL PRIMARY KEY,
    CPF_CLIENTE VARCHAR(11) REFERENCES CLIENTE(CPF) ON DELETE CASCADE,
    QTDE_PARCELAS INT,
    DATA_INICIO DATE DEFAULT CURRENT_DATE,
    DATA_FIM DATE DEFAULT (CURRENT_DATE + INTERVAL '30 days')
);

-- Para a tabela ALUGUEISATIVOS
CREATE TABLE ALUGUEISATIVOS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID) ON DELETE CASCADE,  -- Adicionado ON DELETE CASCADE
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

-- Para a tabela REGISTRODEALUGUEIS
CREATE TABLE REGISTRODEALUGUEIS(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID) ON DELETE CASCADE,  -- Adicionado ON DELETE CASCADE
    ID_EQUIPAMENTO INT REFERENCES EQUIPAMENTO(ID),
    QUANTIDADE INT NOT NULL,
    VALOR NUMERIC(14,2)
);

-- Para a tabela PAGAMENTO
CREATE TABLE PAGAMENTO(
    ID_ALUGUEL INT REFERENCES ALUGUEL(ID) ON DELETE CASCADE,  -- Adicionado ON DELETE CASCADE
    PARCELA_NUMERO INT,
    VALOR_PARCELA NUMERIC(10,2),
    DATA_VENCIMENTO DATE,
    STATUS VARCHAR(10) CHECK(STATUS IN ('PAGO','VENCIDO','A PAGAR')),
    PRIMARY KEY (ID_ALUGUEL, PARCELA_NUMERO)
);

-- TRIGGERS

-- 1) SE O ADMINISTRADOR APAGOU UM ALUGUEL ATIVO, VAI PARA O REGISTRO
CREATE OR REPLACE FUNCTION registra_saida_aluguel() RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO REGISTRODEALUGUEIS VALUES(OLD.ID_ALUGUEL, OLD.ID_EQUIPAMENTO, OLD.QUANTIDADE, OLD.VALOR);
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER registra_saida_aluguel_trg
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION registra_saida_aluguel();

-- 2) SE O ADMINISTRADOR APAGOU UM ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION atualiza_estoque() RETURNS TRIGGER AS $$
BEGIN
    UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE + OLD.QUANTIDADE WHERE ID = OLD.ID_EQUIPAMENTO;
    RETURN OLD;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER atualiza_estoque_trg
BEFORE DELETE ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION atualiza_estoque();

-- 3) SE O CLIENTE CRIAR ALUGUEL, ATUALIZA QUANTIDADE DE EQUIPAMENTOS NO ESTOQUE
CREATE OR REPLACE FUNCTION dar_baixa_no_estoque() RETURNS TRIGGER AS $$
DECLARE
    QTDE_NO_ESTOQUE INT;
BEGIN
    SELECT QUANTIDADE INTO QTDE_NO_ESTOQUE FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    IF (QTDE_NO_ESTOQUE < NEW.QUANTIDADE) THEN
        RAISE EXCEPTION 'A quantidade solicitada excede a quantidade em estoque';
    ELSE
        UPDATE EQUIPAMENTO SET QUANTIDADE = QUANTIDADE - NEW.QUANTIDADE WHERE ID = NEW.ID_EQUIPAMENTO;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER dar_baixa_no_estoque_trg
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION dar_baixa_no_estoque();

-- 4) VALOR TOTAL DO ALUGUEL VAI SER DADO POR TRIGGER
CREATE OR REPLACE FUNCTION set_valor_aluguel() RETURNS TRIGGER AS $$
DECLARE
    DATA_INICIAL DATE;
    DATA_FINAL DATE;
    DIARIA NUMERIC(10,2);
BEGIN
    SELECT DATA_INICIO INTO DATA_INICIAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    SELECT DATA_FIM INTO DATA_FINAL FROM ALUGUEL WHERE ID = NEW.ID_ALUGUEL;
    
    SELECT VALOR_DIARIA INTO DIARIA FROM EQUIPAMENTO WHERE ID = NEW.ID_EQUIPAMENTO;
    
    NEW.VALOR := NEW.QUANTIDADE * (DATA_FINAL - DATA_INICIAL) * DIARIA;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_valor_aluguel_trg
BEFORE INSERT ON ALUGUEISATIVOS
FOR EACH ROW
EXECUTE FUNCTION set_valor_aluguel();

-- 5) CRIAÇÃO DOS PAGAMENTOS A PARTIR DA QUANTIDADE DE PARCELAS
CREATE OR REPLACE FUNCTION create_pagamentos() RETURNS TRIGGER AS $$
DECLARE
    VALOR_TOTAL NUMERIC := 0;
    VALOR_PARCELA NUMERIC(10,2);
    ITERATOR INT := 0;
BEGIN
    -- Busca o valor total dos aluguéis ativos para o novo ID de aluguel
    SELECT COALESCE(SUM(VALOR), 0) INTO VALOR_TOTAL 
    FROM ALUGUEISATIVOS 
    WHERE ID_ALUGUEL = NEW.ID;
    
    -- Calcula o valor da parcela
    IF (NEW.QTDE_PARCELAS > 0) THEN
        VALOR_PARCELA := VALOR_TOTAL / NEW.QTDE_PARCELAS;
        
        -- Gera as parcelas
        WHILE (ITERATOR < NEW.QTDE_PARCELAS) LOOP
            INSERT INTO PAGAMENTO 
            VALUES(NEW.ID, ITERATOR + 1, VALOR_PARCELA, CURRENT_DATE + INTERVAL '30 days' * (ITERATOR + 1), 'A PAGAR');
            ITERATOR := ITERATOR + 1;
        END LOOP;
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER create_pagamentos_trg
AFTER INSERT ON ALUGUEL
FOR EACH ROW
EXECUTE FUNCTION create_pagamentos();

-- POVOAMENTO DO BD

-- Clientes
INSERT INTO CLIENTE VALUES
('11111111111', 'Alexander Neves Barbosa Júnior', '39272104', 406, 'Casa', '31982679282', 'alequissander'),
('22222222222', 'Pedro Vieira Conceição', '30110100', 292, 'Casa', '31988888888', 'pedrito'),
('33333333333', 'Maurílio Rittershaussen Novaes', '30110200', 612, 'Casa', '31977777777', 'mistermaurilio'),
('44444444444', 'Davi Paulino Laboissiere Dantas', '30110300', 101, 'Bloco 10, Apto 102', '31966666666', 'superautopets'),
('55555555555', 'Eduardo Morais Silva Martins', '30110400', 983, 'Casa', '31955555555', 'dudu123'),
('66666666666', 'Iuri Veras Andrade Lima', '30110500', 482, 'Casa', '31944444444', 'iuri456');

-- Fornecedor
INSERT INTO FORNECEDOR VALUES
('12312312301000', 'Betoneiras Douradas LTDA.', 3133223321, 'betodourada@gmail.com'),
('45645645601000', 'Murilo Bittencourt Inc.',3133223322, 'muribitec@gmail.com'),
('78978979801000', 'Construto e Equipamentos LTDA.',3133223323, 'construtoeqp@gmail.com'),
('11122233301000', 'Savassi Equipamentos',3133223324, 'savassieqp@gmail.com'),
('44455566601000', 'FreeGlut LTDA.',3133223325, 'freeglut@gmail.com');

-- Equipamento
INSERT INTO EQUIPAMENTO (ID, NOME, CNPJ_FORNECEDOR, QUANTIDADE, DESCRICAO, VALOR_DIARIA, URL_IMAGEM) VALUES
(1,'Betoneira', '12312312301000', 300, '400 litros, 220v', 60.00, 'https://img.freepik.com/fotos-premium/maquinaria-industrial-do-misturador-de-cimento-no-canteiro-de-obras_56854-3133.jpg?w=900'),
(2, 'Kit EPI', '45645645601000', 550,'Capacete, luvas, botina 40, oculos protetor', 8.00, 'https://img.freepik.com/fotos-gratis/luvas-de-seguranca-de-construcao-plana-e-mascara-medica_23-2148784095.jpg?t=st=1737938300~exp=1737941900~hmac=357eb96254e3720f4e3b49d82a104bf633ccacb9b20349cc74d38c3d208462cc&w=740'),
(3, 'Martelos', '78978979801000', 120,'Martelo de unha, martelo chapeador e martelo pena', 7.00, 'https://img.freepik.com/fotos-gratis/martelos-de-construcao-ainda-vida_23-2150563178.jpg?t=st=1737938350~exp=1737941950~hmac=67887079eccdd68d2d79bc20480771b11d7ce854da85dbd562805790b66bc617&w=740'),
(4, 'Aindaime 4 unidades','44455566601000',80, '1,00 x 1,50m', 20.00, 'https://img.freepik.com/fotos-gratis/bela-foto-de-barras-de-aco-de-metal-no-predio_181624-26081.jpg?t=st=1737938576~exp=1737942176~hmac=483c79d75ad5ffb3077bea3cf0adf4881a812762046314e309a3d1f551eb944b&w=900'),
(5, 'Lixadeira', '11122233301000', 800, 'Esmerilhadeira 115mm 880w', 10.00, 'https://img.freepik.com/fotos-gratis/homem-trabalhando-com-um-moedor-angular-com-brilhos-dele_181624-29243.jpg?t=st=1737938682~exp=1737942282~hmac=8f06b0349796131fbc9975ad0190379dd9ae65aeaca5d2eb19b975beb6665c04&w=900');

-- Garantir que ao cadastrar vai estar em 6
SELECT setval('equipamento_id_seq', (SELECT MAX(id) FROM equipamento));
SELECT setval('aluguel_id_seq', (SELECT MAX(ID) FROM ALUGUEL));

select * from equipamento;

select * from fornecedor;

select * from cliente;
